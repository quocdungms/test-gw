import asyncio
import struct

from bleak import BleakScanner, BleakClient

# UUIDs t·ª´ t√†i li·ªáu
NAME_UUID = "00002a00-0000-1000-8000-00805f9b34fb"  # Label (GAP service)
LOC_DATA_MODE_UUID = "a02b947e-df97-4516-996a-1882521e0ead"  # Location Data Mode
LOC_DATA_UUID = "003bbdf2-c634-4b3d-ab56-7ec889b89a37"  # Location Data

FILE_NAME = "location_data.txt"

# Ghi d·ªØ li·ªáu v√†o file TXT
def save_to_txt(device_name, loc_mode, data_size, raw_hex, decoded_data):
    with open(FILE_NAME, "a", encoding="utf-8") as f:
        f.write("=" * 50 + "\n")
        f.write(f"T√™n thi·∫øt b·ªã: {device_name}\n")
        f.write(f"Location Mode: {loc_mode}\n")
        f.write(f"S·ªë byte nh·∫≠n: {data_size}\n")
        f.write(f"D·ªØ li·ªáu th√¥ (hex): {raw_hex}\n")
        f.write(f"D·ªØ li·ªáu gi·∫£i m√£: {decoded_data}\n")
        f.write("=" * 50 + "\n\n")

# Gi·∫£i m√£ Location Data Mode 2
def decode_location_mode_2(data):
    result = {}

    # Gi·∫£i m√£ Position (13 bytes ƒë·∫ßu ti√™n)
    x, y, z, quality_pos = struct.unpack("<iiiB", data[1:14])
    result["Position"] = {
        "X": x / 1000,  # Chuy·ªÉn t·ª´ mm sang m
        "Y": y / 1000,
        "Z": z / 1000,
        "Quality Factor": quality_pos
    }

    # Gi·∫£i m√£ Distances (ph·∫ßn c√≤n l·∫°i)
    distances = []
    if len(data) > 14:
        count = data[14]  # S·ªë l∆∞·ª£ng kho·∫£ng c√°ch
        result["Count"] = count
        for i in range(count):
            offset = 15 + i * 7
            node_id, distance, quality = struct.unpack("<H i B", data[offset:offset + 7])
            distances.append({
                "Node ID": node_id,
                "Distance": distance / 1000,  # Chuy·ªÉn t·ª´ mm sang m
                "Quality Factor": quality
            })
        result["Distances"] = distances

    return result

# L·∫•y d·ªØ li·ªáu li√™n t·ª•c m·ªói 3 gi√¢y
async def fetch_location_data(client, device_name, loc_mode):
    while True:
        if not client.is_connected:
            print("üî¥ M·∫•t k·∫øt n·ªëi BLE, d·ª´ng nh·∫≠n d·ªØ li·ªáu.")
            return  # D·ª´ng v√≤ng l·∫∑p ƒë·ªÉ k·∫øt n·ªëi l·∫°i
        
        try:
            loc_data = await client.read_gatt_char(LOC_DATA_UUID)
            raw_hex = loc_data.hex()
            decoded_data = decode_location_mode_2(loc_data)

            print(f"Nh·∫≠n {len(loc_data)} byte t·ª´ {device_name}")

            # Ghi d·ªØ li·ªáu v√†o file TXT
            save_to_txt(device_name, loc_mode, len(loc_data), raw_hex, decoded_data)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc GATT: {e}")
            return  # D·ª´ng v√≤ng l·∫∑p ƒë·ªÉ k·∫øt n·ªëi l·∫°i

        await asyncio.sleep(3)  # Ch·ªù 3 gi√¢y tr∆∞·ªõc khi ƒë·ªçc ti·∫øp

# Th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa 3 l·∫ßn
async def connect_with_retries(address):
    for attempt in range(1, 4):  # T·ªëi ƒëa 3 l·∫ßn th·ª≠ k·∫øt n·ªëi
        try:
            print(f"üîÑ ƒêang th·ª≠ k·∫øt n·ªëi (l·∫ßn {attempt})...")
            async with BleakClient(address) as client:
                if client.is_connected:
                    print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng: {address}")

                    # ƒê·ªçc t√™n thi·∫øt b·ªã
                    name_data = await client.read_gatt_char(NAME_UUID)
                    device_name = name_data.decode("utf-8")

                    # ƒê·ªçc Location Data Mode
                    loc_mode_data = await client.read_gatt_char(LOC_DATA_MODE_UUID)
                    loc_mode = loc_mode_data[0]

                    print(f"Thi·∫øt b·ªã: {device_name}, Mode: {loc_mode}")

                    # G·ªçi h√†m nh·∫≠n d·ªØ li·ªáu
                    await fetch_location_data(client, device_name, loc_mode)
                    return  # N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, kh√¥ng c·∫ßn th·ª≠ l·∫°i n·ªØa
        except Exception as e:
            print(f"‚ùå K·∫øt n·ªëi th·∫•t b·∫°i (l·∫ßn {attempt}): {e}")

        await asyncio.sleep(3)  # Ch·ªù 3 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

    print("‚õî Kh√¥ng th·ªÉ k·∫øt n·ªëi sau 3 l·∫ßn th·ª≠. Tho√°t.")

# Qu√©t v√† t√¨m thi·∫øt b·ªã DWM
async def main():
    while True:
        print("üîç ƒêang qu√©t thi·∫øt b·ªã BLE...")
        devices = await BleakScanner.discover()
        dwm_device = next((d for d in devices if "DWCE07" in (d.name or "")), None)

        if dwm_device:
            print(f"‚úÖ T√¨m th·∫•y thi·∫øt b·ªã: {dwm_device.address}")
            await connect_with_retries(dwm_device.address)
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã DWM n√†o. Th·ª≠ l·∫°i sau 3 gi√¢y.")

        await asyncio.sleep(3)  # Ch·ªù 3 gi√¢y tr∆∞·ªõc khi qu√©t l·∫°i

if __name__ == "__main__":
    asyncio.run(main())
